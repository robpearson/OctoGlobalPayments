step "manual-intervention-required" {
    name = "Manual Intervention Required"

    action {
        action_type = "Octopus.Manual"
        environments = ["production"]
        properties = {
            Octopus.Action.Manual.BlockConcurrentDeployments = "False"
            Octopus.Action.Manual.Instructions = "Production Deployment Approval "
            Octopus.Action.Manual.ResponsibleTeamIds = "global/everyone"
            Octopus.Action.RunOnServer = "false"
        }
    }
}

step "production-deployment-notification" {
    name = "Production Deployment Notification"

    action {
        action_type = "Octopus.Email"
        environments = ["production"]
        properties = {
            Octopus.Action.Email.Subject = "#{Octopus.Project.Name}: #{Octopus.Environment.Name} Deployment"
            Octopus.Action.Email.To = "adam.close@octopus.com"
            Octopus.Action.RunOnServer = "false"
        }
    }
}

step "deploy-frontend-yaml" {
    name = "Deploy Frontend YAML"
    properties = {
        Octopus.Action.TargetRoles = "demo-k8s-cluster"
    }

    action {
        action_type = "Octopus.KubernetesDeployRawYaml"
        properties = {
            Octopus.Action.GitRepository.FilePathFilters = "manifests/frontend.yaml"
            Octopus.Action.GitRepository.Source = "Project"
            Octopus.Action.Kubernetes.DeploymentTimeout = "180"
            Octopus.Action.Kubernetes.ResourceStatusCheck = "True"
            Octopus.Action.Kubernetes.ServerSideApply.Enabled = "False"
            Octopus.Action.Kubernetes.ServerSideApply.ForceConflicts = "False"
            Octopus.Action.KubernetesContainers.CustomResourceYamlFileName = "manifests/frontend.yaml"
            Octopus.Action.KubernetesContainers.Namespace = "#{Octoretail.namespace}"
            Octopus.Action.Package.JsonConfigurationVariablesTargets = "**/*.{yml,yaml}"
            Octopus.Action.RunOnServer = "false"
            Octopus.Action.Script.ScriptSource = "GitRepository"
        }
        worker_pool_variable = ""

        packages "octoretail-frontend" {
            acquisition_location = "NotAcquired"
            feed = "docker-hub"
            package_id = "adamoctoclose/octoretail-frontend"
            properties = {
                Extract = "False"
                Purpose = "DockerImageReference"
                SelectionMode = "immediate"
            }
        }
    }
}

step "smoke-tests" {
    name = "Smoke Tests"

    action {
        action_type = "Octopus.Script"
        properties = {
            Octopus.Action.Script.ScriptBody = "write-host \"Smoke test application\" "
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Script.Syntax = "PowerShell"
        }
        worker_pool = "hosted-windows"
    }
}

step "roll-back-on-failure" {
    condition = "Failure"
    name = "Roll Back On Failure"

    action {
        action_type = "Octopus.Script"
        environments = ["production"]
        properties = {
            Octopus.Action.Script.ScriptBody = "write-host \"roll back\" "
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Script.Syntax = "PowerShell"
        }
        worker_pool = "hosted-ubuntu"
    }
}